#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Long;
use JSON;
use Data::Dumper;
use POSIX;
use File::Basename;

use constant TRUE => 1;
use constant FALSE => 0;

my $VERSION = "2";

#
# At some point, we may want to split the template into two pieces, one for
# the pool's administrator with higher privileges, and one for the project
# which has very limited privileges.  In particular, the Lambda functions
# and the IAM roles should be shared (with the exception of the S3 reader).
#

#
# Argument handling.
#

my(	$projectID, $stackName, $annexSize, $expiry, $keypairName,
	$centralManager, $passwordFile, $passwordLocation,
	$vpc, $subnets, $imageIDList, $instanceTypeList, $spotPriceList,
	$launchConfigList, $region, $configFile, $configLocation,
	$delete,
	$help, $verbose );

GetOptions(
    'project-id=s'		=> \$projectID,
	'stack-name=s'		=> \$stackName,
	'instances=s'		=> \$annexSize,
	'expiry=s'			=> \$expiry,
	'keypair=s'			=> \$keypairName,
	'central-manager=s'	=> \$centralManager,
	'password-file=s'	=> \$passwordFile,
	'password-url=s'	=> \$passwordLocation,
	'vpc=s'				=> \$vpc,
	'subnets=s'			=> \$subnets,
	'image-ids=s'		=> \$imageIDList,
	'instance-types=s'	=> \$instanceTypeList,
	'spot-prices=s'		=> \$spotPriceList,
	'launch-configs=s'	=> \$launchConfigList,
	'region=s'			=> \$region,
	'config-file=s'		=> \$configFile,
	'config-url=s'		=> \$configLocation,
	'delete'			=> \$delete,
	'help'				=> \$help,
	'verbose'			=> \$verbose
	);

if( defined( $help ) ) {
	print( "Usage: $0 --instances <size> [options]\n" );
	print( "\n" );
	print( "Adjusts the size of an annex, creating it if necessary.  " );
	print( "It returns when the annex has reached the specified size.  " );
	print( "To create an annex, you must specify a keypair.  " );
	print( "\n" );
	print( "Required flags:\n" );
	print( "\t--project-id		 To whom will this annex belong?\n" );
	print( "Use one or more of the following flags:\n" );
	print( "\t--instances        How big should the annex be?\n" );
	print( "\t--expiry           When (YYYY-MM-DD HH:MM [+/-hhmm]) the annex should shut itself down.\n" );
	print( "Options:\n" );
	print( "\t--region           In which region should the annex be?\n" );
	print( "\t--keypair          Which keypair to use (same for all instances).\n" );
	print( "\t--help             Print this help.\n" );
	print( "Expert options:\n" );
	print( "\t--verbose          Report extra information.\n" );
	print( "\t--password-url     An S3 URL pointing to the pool password file.\n" );
	print( "\t--password-file    Specify the pool password file.\n" );
	print( "\t--central-manager  Specify the annex's central manager.\n" );
	print( "\t--stack-name       Name the stack (annex).\n" );
	print( "\t--vpc              The VPC to launch instances in.\n" );
	print( "\t--subnets          Comma-separated list of subnets to use.  Determines which AZs you use.\n" );
	print( "\t--image-ids        Comma-separated list of image IDs.\n" );
	print( "\t--instance-types   Comma-separated list of instance types.\n" );
	print( "\t--launch-configs   Comma-separated list of launch configurations.\n" );
	exit( 0 );
}

if(! defined( $projectID )) {
	die( "You must specify --project-id.\n" );
}

# This makes the project ID safe to use as part of an S3 bucket name.  We
# don't allow periods since that can cause grief with https in some cases,
# and that also makes the first/last character restriction easier to enforce.
my $safeProjectID = lc( $projectID );
$safeProjectID =~ s/[^a-z0-9]/-/g;
$safeProjectID =~ s/^-//;
$safeProjectID =~ s/-$//;

if( $safeProjectID ne $projectID ) {
	print( "Using '$safeProjectID' as project ID.\n" );
	$projectID = $safeProjectID;
}

unless( defined( $delete ) ) {
	if((! defined( $annexSize )) && (! defined( $expiry ))) {
		die( "You must specify at least one of --instances and --expiry.\n" );
	}
}

if( defined( $annexSize ) ) {
	unless( $annexSize =~ /\d+/ ) {
		die( "Size must be a positive integer.\n" );
	}
}

if( ! defined( $region ) ) {
	# We need to know the aws tool's default region to select which bucket
	# to use as the source of the Lambda functions, so we may as well just
	# use it for everything.
	my @command = ( 'aws', 'configure', 'get', 'region' );

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		$region = 'us-west-1';
		print( "Failed to obtain, or default region not set.  Using '${region}'.\n" );
	} else {
		chomp( $output );
		$region = $output;
	}
}

# We implement leases based on duration, not expiration.
# The default duration is six minutes less than one day,
# because Amazon hates all of you.
my $now = time();
my $duration = 1434;
if( defined( $expiry ) ) {
	my( $date, $time, $zone ) = split( ' ', $expiry );
	my( $year, $month, $day ) = split( '-', $date );
	my( $hour, $minute ) = split( ':', $time );

	my $epoch = mktime( 0, $minute, $hour, $day, $month - 1, $year - 1900 );
	$duration = $epoch - $now;
	if( $duration < 0 ) {
		print( "You must specify an expiration in the future.\n" );
		exit( 1 );
	}

	# Should this actually be 1434 (see above)?
	if( $duration >= (24 * 60 * 60) ) {
		print( "You must specify an expiration less than 24 hours from now.\n" );
		exit( 1 );
	}

	$duration = $duration - ($duration % 60);
	$duration = $duration / 60;
}

#
# We need to know if the stack exists before we can correctly parse the
# rest of the command-line options.  We need the name of the central
# manager to determine the name of the stack, if it wasn't given.
#

if(! defined( $centralManager ) ) {
	$centralManager = `condor_config_val COLLECTOR_HOST`;
	chomp( $centralManager );
	if( $verbose ) { print( "The annex will report to '${centralManager}'.\n" ); }
}

my $safeCM = $centralManager;
$safeCM =~ s/:.*$//g;
$safeCM =~ s/\./-/g;

if(! defined( $stackName )) {
	$stackName = "htcondor-annex-${safeCM}-${projectID}";
	if( $verbose ) { print( "The stack will be named '${stackName}'.\n" ); }
} else {
	unless( $stackName =~ /[a-zA-Z][-a-zA-Z0-9]+/ ) {
		die( "The annex's name must start with an alphabetic character and contain only alphanumeric characters and hypens.\n" );
	}
}

print( "Checking to see if annex already exists..." );
my $stackExists = stackExists( $stackName );
if( $stackExists ) { print( " yes.\n" ); }
else{ print( " no.\n" ); }

if( $stackExists && $delete ) {
	print( "Deleting stack..." );
	deleteStack( $stackName );
	print( " done.\n" );
	exit( 0 );
}

if((! $stackExists) && (! defined( $annexSize ))) {
	die( "You must specify --instances to set the initial size of the annex.\n" );
}

# Parse the rest of the command-line options.
if(! $stackExists) {
	if(! defined( $keypairName )) {
		if( keypairExists( $projectID ) ) {
			$keypairName = $projectID;
			if( $verbose ) { print( "Using keypair '$keypairName'.\n" ); }
		} else {
			$keypairName = "HTCondorAnnex";
			if(! keypairExists( $keypairName )) {
				print( "You must specify --keypair when creating a new stack.\n" );
				exit( 1 );
			}
		}
	} else {
		if(! keypairExists( $keypairName )) {
			print( "You must specify an existing keypair when creating a new stack.\n" );
			exit( 1 );
		}
	}
}

if( $stackExists && defined( $vpc ) ) {
	print( "Ignoring VPC specified after stack creation.\n" );
}

if( (! $stackExists) && (! defined( $vpc )) ) {
	print( "Attempting to determine which VPC to use..." );

	my @command = (
		'aws', '--region', $region, 'ec2', 'describe-vpcs',
		'--filters', 'Name=tag:Name,Values=HTCondorAnnex'
	);

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "\n" );
		print( " failed ($rv), aborting.  You must specify --vpc.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	my $vpcs = $reply->{ "Vpcs" };
	if( scalar( @{$vpcs} ) == 0 ) {
		print( " done.  Found no VPCs, aborting.  You must specify --vpc.\n" );
		exit( 1 );
	}
	if( scalar( @{$vpcs} ) > 1 ) {
		print( "  ... picking the first of many..." );
	}
	$vpc = $vpcs->[0]->{ "VpcId" };
	print( " done." );
	if( $verbose) { print( "  Found VPC '$vpc'." ); }
	print( "\n" );
}

# Check if the VPC is how we like it.
if(! $stackExists) { checkVPC( $vpc ); }

if( $stackExists && defined( $subnets ) ) {
	print( "Ignoring subnets specified after stack creation.\n" );
}

if( (! $stackExists) && (! defined( $subnets )) ) {
	print( "Attempting to determine which subnets to use..." );

	my @command = (
		'aws', '--region', $region, 'ec2', 'describe-subnets',
		'--filters', 'Name=tag:Name,Values=HTCondorAnnex', 'Name=vpc-id,Values=' . $vpc
	);

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "\n" );
		print( " failed ($rv), aborting.  You must specify --subnets.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	my $subnetList = $reply->{ "Subnets" };
	if( scalar( @{$subnetList} ) == 0 ) {
		print( " done.  Found no subnets, aborting.  You must specify --subnets.\n" );
		exit( 1 );
	}
	my @subnetIDs;
	foreach my $subnet (@{$subnetList}) {
		push( @subnetIDs, $subnet->{ "SubnetId" } );
	}

	$subnets = join( ", ", @subnetIDs );
	print( " done." );
	if( $verbose ) { print( "  Found subnets $subnets." ); }
	print( "\n" );
}

my $imageIDs = [ ];
my $spotPrices = [ ];
my $instanceTypes = [ ];
if( (! $stackExists) || defined( $annexSize ) ) {
	if( defined( $imageIDList ) && defined( $instanceTypeList ) ) {
		my @imageList = split( ",", $imageIDList );
		my @instanceList = split( ",", $instanceTypeList );
		my @spotList = split( ",", $spotPriceList );
		if( scalar( @imageList ) != scalar( @instanceList ) ) {
			print( "Image ID list and instance type list are not the same length, aborting.\n" );
			exit( 1 );
		}
		if( scalar( @instanceList ) != scalar( @spotList ) ) {
			print( "Instance type list and spot price list are not the same length, aborting.\n" );
			exit( 1 );
		}
		$imageIDs = \@imageList;
		$instanceTypes = \@instanceList;
		$spotPrices = \@spotList;
	} else {
		findLaunchConfigurations( $imageIDs, $instanceTypes, $spotPrices, $launchConfigList );
	}
}

if( $stackExists && (defined( $configFile ) || defined( $configLocation )) ) {
	print( "Ignoring config file or location specified after stack creation.\n" );
	$configFile = undef;
}

# Globals for the END block and signal traps.
# $passwordLocation was already declared.
my $createdS3Bucket = FALSE;
my $uploadedPasswordFile = FALSE;
my $uploadedConfigFile = FALSE;
my $s3Bucket = "htcondor-annex-${safeCM}-${projectID}";
END { s3Cleanup(); }
$SIG{ 'INT' } = \&s3CleanupAndExit;

if( ! $stackExists ) {
	# The pool password file and the stack have the same lifetime.  Once
	# we've uploaded the pool password file, we're only responsible for
	# deleting it until the stack exists, at which point it takes over.
	if(! defined( $passwordLocation )) {
		if(! defined( $passwordFile )) {
			$passwordFile = `condor_config_val SEC_PASSWORD_FILE`;
			chomp( $passwordFile );
			if( (! defined( $passwordFile )) || $passwordFile eq '' ) {
				die( "Your pool must be configured to use a pool password.\n" );
			}
			# print( "Using password file '${passwordFile}'.\n" );
		}

		unless( -e $passwordFile ) {
				die( "The specified password file (${passwordFile}) does not exist.\n" );
		}

		# Securely upload the password file to S3, then set $passwordLocation
		# accordingly.
		print( "Creating private S3 bucket to store pool password..." );
		my @s3BucketCommand = ( 'aws', 's3api', 'create-bucket',
			'--acl', 'private',
			'--bucket', $s3Bucket );
		my( $rv, $log ) = capture( @s3BucketCommand );
		if( $rv != 0 ) {
			print( $log );
			print( "\n" );
			print( "Unable to create (private) S3 bucket $s3Bucket ($rv), aborting.\n" );
			exit( 2 );
		}
		$createdS3Bucket = TRUE;
		print( " done.\n" );

		$passwordLocation = "${s3Bucket}/brussel-sprouts";
		my @s3CopyCommand = ( 'aws', 's3', 'cp',
			$passwordFile, "s3://${passwordLocation}" );
		print( "Uploading pool password file..." );
		($rv, $log) = capture( @s3CopyCommand );

		if( $rv != 0 ) {
			print( $log );
			print( "\n" );
			print( "Unable to copy password file to private S3 bucket ($rv), aborting.\n" );
			$rv = system( 'aws', 's3api', 'delete-bucket', '--bucket', $s3Bucket );
			if( $rv != 0 ) {
				print( "Unable to delete (private) S3 bucket $s3Bucket ($rv)!  Sorry, you'll have to clean up after us.\n" );
			}
			exit( 3 );
		}
		$uploadedPasswordFile = TRUE;
		print( " done.\n" );

		if( (! defined( $configLocation )) && defined( $configFile ) ) {
			my $basename = basename( $configFile );
			$configLocation = "${s3Bucket}/${basename}";
			@s3CopyCommand = ( 'aws', 's3', 'cp',
				$configFile, "s3://${configLocation}" );
			print( "Uploading config file..." );
			($rv, $log) = capture( @s3CopyCommand );

			if( $rv != 0 ) {
				print( $log );
				print( "\n" );
				print( "Unable to copy config file to private S3 bucket ($rv), aborting.\n" );

				$rv = system( 'aws', 's3', 'rm', "s3://${passwordLocation}" );
				if( $rv != 0 ) {
					print( "Unable to delete pool password file '${passwordLocation}' ($rv)!  Sorry, you'll have to clean up after us.\n" );
				} else {
					$rv = system( 'aws', 's3api', 'delete-bucket', '--bucket', $s3Bucket );
					if( $rv != 0 ) {
						print( "Unable to delete (private) S3 bucket $s3Bucket ($rv)!  Sorry, you'll have to clean up after us.\n" );
					}
				}

				exit( 3 );
			}

			$uploadedConfigFile = TRUE;
			print( " done.\n" );
		}
	}

	print( "Starting annex (creating stack)..." );
	createStack( $stackName, $centralManager, $keypairName, $duration, $annexSize, $passwordLocation, $vpc, $subnets, $imageIDs, $instanceTypes );
	print( " done.\n" );

	# Once we've created the stack, the S3 bucket and its contents can't be
	# deleted until after the stack is; otherwise, the annex won't be able
	# to join the pool (or be properly configured).  We could do the clean-
	# up on exit, instead, but that means we'd have to re-upload everything
	# to ever add another instance to the pool, which seems silly.
	$createdS3Bucket = FALSE;
	$uploadedPasswordFile = FALSE;
	$uploadedConfigFile = FALSE;
}

# If the stack already exists and we're not changing its size, don't
# wait for the AutoScaling group.  Even if the stack already exists, we
# still need to wait for its AutoScaling Group to be created so we can
# obtain its name before we can adjust its size.
my @asgNames = undef;
unless( $stackExists && (! defined( $annexSize )) ) {
	print( "Waiting for annex to create autoscaling groups..." );
	@asgNames = waitForAutoScalingGroups( $stackName, scalar( @{$imageIDs} ) );
	print( " done.\n" );
}

if( defined( $annexSize ) ) {
	my $asgSize = scalar( @asgNames );
	print( "Splitting annex's desired size among $asgSize autoscaling groups..." );
	setAnnexSize( \@asgNames, $annexSize );
	print( " done.\n" );
}

# Set the lease duration if we didn't just create the annex.
if( $stackExists && defined( $expiry ) ) {
	print( "Waiting for annex construction to finish..." );
	waitForStackComplete( $stackName );
	print( " done.\n" );

	print( "Setting annex's expiration..." );
	setAnnexLeaseDuration( $stackName, $duration, $now );
	print( " done.\n" );
}

# Wait for the ASG's size to change.
if( defined( $annexSize ) ) {
	print( "Waiting for annex to become size $annexSize..." );
	my $desiredAnnexSize = waitForAnnexSize( \@asgNames, $annexSize );
	print( " done.\n" );

	if( $desiredAnnexSize != $annexSize ) {
		print( "Annex's desired size not the size you set.  Not sure what's going on here.\n" );
	}

	# Wait for the ASG nodes to show up in the pool.
	print( "Waiting for count of annex instances in pool to become $desiredAnnexSize..." );
	#waitForNodesInPool( $projectID, $desiredAnnexSize );
	print( " done.\n" );
}

exit( 0 );

# -----------------------------------------------------------------------------

sub capture {
	my @command = @_;
	# print( "COMMAND: " . join( ' ', @command ) . "\n" );

	my $childFD;
	my $childPID = open( $childFD, "-|" );
	if(! defined( $childFD )) {
		print( "Unable to execute fork to execute '" . join( ' ', @command ) . "'.\n" );
		return ( -1, undef );
	}

	if( $childPID ) {
		my $size = 0;
		my $log = undef;
		my $read = 0;
		while( ($read = read( $childFD, $log, 1024, $size )) != 0 ) { $size += $read; }

		waitpid( $childPID, 0 );
		my $rv = $?;

		return ($rv, $log);
	} else {
		open( STDERR, '>&STDOUT' );
		exec( @command );
	}
}

sub captureCommand {
	my @command = @_;
	# print( "COMMAND: " . join( ' ', @command ) . "\n" );

	my $childFD;
	my $childPID = open( $childFD, '-|', @command );
	if( $childPID == 0 ) {
		print( "Unable to execute '" . join( ' ', @command ) . "', aborting.\n" );
		exit( 6 );
	}

	my $size = 0;
	my $output = undef;
	my $read = 0;
	while( ($read = read( $childFD, $output, 1024, $size )) != 0 ) { $size += $read; }

	waitpid( $childPID, 0 );
	if( $? != 0 ) {
		print( "Command '" . join( ' ', @command ) . "' failed ($?), aborting.\n" );
		exit( 7 );
	}
	close( $childFD );

	return $output;
}

sub stackExists {
	my( $stackName ) = @_;

	my @command = ( 'aws', '--region', $region, 'cloudformation', 'describe-stacks' );
	my $output = captureCommand( @command );
	my $reply = decode_json( $output );

	my $stacks = $reply->{ 'Stacks' };
	foreach my $stack (@{$stacks}) {
		if( $stackName eq $stack->{ 'StackName' } ) { return TRUE; }
	}

	return FALSE;
}

sub createStack {
	my( $stackName, $centralManager, $keypairName, $duration, $size, $passwordLocation, $vpc, $subnets, $imageIDs, $instanceTypes ) = @_;

	my $parameters = '[
            {
                "ParameterKey" : "CentralManager",
                "ParameterValue" : "' . $centralManager . '"
            },
            {
                "ParameterKey" : "SSHKeypairName",
                "ParameterValue" : "' . $keypairName . '"
            },
            {
                "ParameterKey" : "LeaseDuration",
                "ParameterValue" : "' . $duration . '"
            },
            {
                "ParameterKey" : "Size",
                "ParameterValue" : "' . $size . '"
            },
            {
                "ParameterKey" : "S3PoolPassword",
                "ParameterValue" : "' . $passwordLocation . '"
            },
            {
                "ParameterKey" : "ProjectID",
                "ParameterValue" : "' . $projectID . '"
            },
            {
                "ParameterKey" : "VPC",
                "ParameterValue" : "' . $vpc . '"
            },
            {
                "ParameterKey" : "VPCSubnets",
                "ParameterValue" : "' . $subnets . '"
            }';
	if( $createdS3Bucket ) {
		$parameters .= ',
			{
				"ParameterKey" : "S3DeleteBucket",
				"ParameterValue" : "' . $s3Bucket . '"
			}';
	}
	if( defined( $configLocation ) ) {
		$parameters .= ',
			{
				"ParameterKey" : "S3ConfigFile",
				"ParameterValue" : "' . $configLocation . '"
			}';
	}
	for( my $i = 0; $i < scalar( @{$instanceTypes} ); ++$i ) {
		$parameters .= ',
            {
                "ParameterKey" : "ImageID' . ($i + 1) . '",
                "ParameterValue" : "' . $imageIDs->[ $i ] . '"
            },
            {
                "ParameterKey" : "InstanceType' . ($i + 1) . '",
                "ParameterValue" : "' . $instanceTypes->[ $i ] . '"
            }';
        if( defined( $spotPrices->[ $i ] ) ) {
        	$parameters .= ',
        	{
                "ParameterKey" : "SpotPrice' . ($i + 1) . '",
                "ParameterValue" : "' . $spotPrices->[ $i ] . '"
        	}' . "\n";
        } else {
        	$parameters .= "\n";
        }
	}
	$parameters .= ']';

	my @command = (
		'aws', '--region', $region, 'cloudformation', 'create-stack',
		'--template-url', "https://s3.amazonaws.com/condor-annex-at-ucsd/template-${VERSION}",
		'--stack-name', $stackName,
    	'--capabilities', 'CAPABILITY_IAM',
    	'--tags', "Key=ProjectID,Value=${projectID}",
		'--parameters', $parameters );

	my( $rv, $log ) = capture( @command );
	if( $rv != 0 ) {
		print( $log );
		print( "\n" );
		print( "Unable to create CloudFormation stack ($rv), aborting.\n" );
		exit( 1 );
	}
}

sub deleteStack {
	my( $stackname ) = @_;

	my @command = ( 'aws', '--region', $region,
		'cloudformation', 'delete-stack',
		'--stack-name', $stackName );
	my( $rv, $log ) = capture( @command );
	if( $rv != 0 ) {
		print( $log );
		print( "\n" );
		print( "Unable to delete CloudFormation stack ($rv), aborting.\n" );
		exit( 1 );
	}

	# We could wait here for the stack to finish deleting, but why bother?
}

sub waitForAutoScalingGroups {
	my( $stackName, $desiredAsgCount ) = @_;

	# If the stack is in CREATE_COMPLETE or UPDATE_COMPLETE, the ASGs
	# have been created.  (This obviates the need to determine how many
	# of them there should be if this is an update.)

	my @command = ( 'aws', '--region', $region, 'cloudformation', 'describe-stacks' );
	my $output = captureCommand( @command );
	my $reply = decode_json( $output );

	my $stacks = $reply->{ 'Stacks' };
	foreach my $stack (@{$stacks}) {
		if( $stackName eq $stack->{ 'StackName' } ) {
			if( $stack->{ 'StackStatus' } eq "CREATE_COMPLETE" ||
				$stack->{ 'StackStatus' } eq "UPDATE_COMPLETE" ) {
				$desiredAsgCount = -1;
			}
		}
	}

	my @asgNames = undef;
	my $lastAsgCount = -1;
	while( 1 ) {
		my @command = ( 'aws', '--region', $region,
			'cloudformation', 'describe-stack-resources',
			'--stack-name', $stackName );
		my $output = captureCommand( @command );

		@asgNames = ();
		my $reply = decode_json( $output );
		my $stackResources = $reply->{ 'StackResources' };
		foreach my $resource (@{$stackResources}) {
			if( $resource->{ 'ResourceType' } eq "AWS::AutoScaling::AutoScalingGroup" ) {
				if( $resource->{ 'ResourceStatus' } eq "CREATE_COMPLETE" || $resource->{ 'ResourceStatus' } eq "UPDATE_COMPLETE" ) {
					push( @asgNames, $resource->{ 'PhysicalResourceId' } );
				}
			}
		}

		my $asgCount = scalar( @asgNames );
		if( $asgCount == $desiredAsgCount || $desiredAsgCount == -1 ) {
			last;
		}

		if( $asgCount != $lastAsgCount ) {
			$lastAsgCount = $asgCount;
			print( " currently ${asgCount}" );
		}

		print( "." );
		sleep( 5 );
	}

	return @asgNames;
}

# Note that we update the size of the ASG directly, rather than going
# through the stack parameter 'size'.  We'll see if a user ever cares.
sub setAutoScalingGroupDesiredSize {
	my( $asgName, $size ) = @_;

	my @command = ( 'aws', '--region', $region,
		'autoscaling', 'update-auto-scaling-group',
		'--auto-scaling-group-name', $asgName,
		'--max-size', $size,
		'--desired-capacity', $size );
	my( $rv, $log ) = capture( @command );
	if( $rv != 0 ) {
		print( $log );
		print( "\n" );
		print( "Unable to set annex to requested size, aborting.\n" );
		exit( 9 );
	}
}

sub s3CleanupAndExit {
	print( "\n" );
	s3Cleanup();
	exit( 1 );
}

sub s3Cleanup {
	if( $uploadedPasswordFile ) {
		print( "Removing password file from S3 before exiting..." );
		my @s3DeleteKeyCommand = ( 'aws', 's3', 'rm', "s3://${passwordLocation}" );
		my( $rv, $log ) = capture( @s3DeleteKeyCommand );
		if( $rv != 0 ) {
			print( $log );
			print( "\n" );
			print( "Failed to delete password file (s3://${passwordLocation}) from S3 ($rv).  Sorry, you'll have to clean up after us.\n" );
			exit( 4 );
		}
		$uploadedPasswordFile = FALSE;
		print( " done.\n" );
	}

	if( $uploadedConfigFile ) {
		print( "Removing config file from S3 before exiting..." );
		my @s3DeleteConfigCommand = ( 'aws', 's3', 'rm', "s3://${configLocation}" );
		my( $rv, $log ) = capture( @s3DeleteConfigCommand );
		if( $rv != 0 ) {
			print( $log );
			print( "\n" );
			print( "Failed to delete config file (s3://${configLocation}) from S3 ($rv).  Sorry, you'll have to clean up after us.\n" );
			exit( 4 );
		}
		print( " done.\n" );
		$uploadedConfigFile = FALSE;
	}

	if( $createdS3Bucket ) {
		print( "Deleting private S3 bucket before exiting..." );
		my ($rv, $log) = capture( 'aws', 's3api', 'delete-bucket', '--bucket', $s3Bucket );
		if( $rv != 0 ) {
			print( $log );
			print( "\n" );
			print( "Unable to delete (private) S3 bucket $s3Bucket ($rv)!  Sorry, you'll have to clean up after us.\n" );
			exit( 5 );
		}
		$createdS3Bucket = FALSE;
		print( " done.\n" );
	}
}

sub waitForNodesInPool {
	my( $projectID, $targetSize ) = @_;

	my $lastTotal = -1;
	while( 1 ) {
		my @statusCommand = (	'condor_status', '-const',
								'ProjectID == "' . $projectID . '"',
								'-af', 'Machine' );
		my( $rv, $log ) = capture( @statusCommand );
		if( $rv != 0 ) {
			print( "Unable to look for annex instances in the pool:\n" );
			print( $log . "\n" );
			print( "Aborting.\n" );
			exit( 1 );
		}

		my $total = undef;
		if( (! defined( $log )) || $log eq "" ) {
			$total = 0;
		} else {
			my %machines;
			my @lines = split( "\n", $log );
			foreach my $line (@lines) {
				$machines{ $line } = 1;
			}
			$total = scalar(keys %machines);
		}

		if( $total == $targetSize ) {
			last;
		}

		if( $total != $lastTotal ) {
			$lastTotal = $total;
			print( " currently ${total}" );
		}

		print( "." );
		sleep( 5 );
	}
}

# We don't poll until the stack has finished updating, although maybe we should.
sub setAnnexLeaseDuration {
	my( $stackName, $duration, $now ) = @_;

	# We need to add a new heartbeat before truncating the duration,
	# to make sure we don't trigger the alarm prematurely.
	my $nowTime = timespec( $now );
	my @heartbeat = ( 'aws', '--region', $region,
		'cloudwatch', 'put-metric-data',
		'--namespace', 'HTCondor/Leases/CloudFormation/' . $stackName,
		'--metric-name', 'Lease', '--value', '1', '--timestamp', $nowTime );

	my( $hbRV, $hbLog ) = capture( @heartbeat );
	if( $hbRV != 0 ) {
		print( $hbLog );
		print( "\n" );
		print( "Unable to set annex heartbeat, aborting.\n" );
		exit( 12 );
	}

	# Don't truncate the duration until we're sure that the hearbeat
	# will be seen by the alarm when it checks itself on update.
	#
	# Unfortunately, get-metric-statistics truncates the seconds field.  We
	# must therefore truncate the start time and then add a whole minute to
	# get the end time for the query.
	my $endTime = timespec( $now, 1, 1 );
	my $startTime = timespec( $now, 1, 0 );

	my @lastHeartbeat = ( 'aws', '--region', $region,
		'cloudwatch', 'get-metric-statistics',
		'--namespace', 'HTCondor/Leases/CloudFormation/' . $stackName,
		'--metric-name', 'Lease', '--statistics', 'Sum',
		'--period', '60', '--start-time', $startTime, '--end-time', $endTime );
	# print( " waiting for heartbeat to be noticed..." );
	# print( " HTCondor/Leases/CloudFormation/${stackName} ('${startTime}' - '${endTime}')... " );
	while( 1 ) {
		my( $output ) = captureCommand( @lastHeartbeat );

		my $ts = undef;
		my $reply = decode_json( $output );
		my $datapoints = $reply->{ 'Datapoints' };
		foreach my $datapoint (@{$datapoints}) {
			$ts = $datapoint->{ 'Timestamp' };
			if(! defined( $ts )) { next; }
			last;
		}

		if( defined( $ts ) ) {
			last;
		} else {
			print( "." );
			sleep( 1 );
		}
	}
	print( " done" );

	print( ", setting new lease..." );
	my @command = ( 'aws', '--region', $region,
		'cloudformation', 'update-stack',
		'--stack-name', $stackName,
		'--use-previous-template',
    	'--capabilities', 'CAPABILITY_IAM',
		'--parameters',
			'ParameterKey=Size,UsePreviousValue=true',
			'ParameterKey=CentralManager,UsePreviousValue=true',
			"ParameterKey=LeaseDuration,ParameterValue=${duration}",
			'ParameterKey=SSHKeypairName,UsePreviousValue=true',
			'ParameterKey=S3PoolPassword,UsePreviousValue=true',
			'ParameterKey=ProjectID,UsePreviousValue=true',
			'ParameterKey=VPC,UsePreviousValue=true',
			'ParameterKey=VPCSubnets,UsePreviousValue=true',
			'ParameterKey=ImageID1,UsePreviousValue=true',
			'ParameterKey=SpotPrice1,UsePreviousValue=true',
			'ParameterKey=InstanceType1,UsePreviousValue=true',
			'ParameterKey=ImageID2,UsePreviousValue=true',
			'ParameterKey=SpotPrice2,UsePreviousValue=true',
			'ParameterKey=InstanceType2,UsePreviousValue=true',
			'ParameterKey=ImageID3,UsePreviousValue=true',
			'ParameterKey=SpotPrice3,UsePreviousValue=true',
			'ParameterKey=InstanceType3,UsePreviousValue=true',
			'ParameterKey=ImageID4,UsePreviousValue=true',
			'ParameterKey=SpotPrice4,UsePreviousValue=true',
			'ParameterKey=InstanceType4,UsePreviousValue=true',
			'ParameterKey=ImageID5,UsePreviousValue=true',
			'ParameterKey=SpotPrice5,UsePreviousValue=true',
			'ParameterKey=InstanceType5,UsePreviousValue=true',
			'ParameterKey=ImageID6,UsePreviousValue=true',
			'ParameterKey=SpotPrice6,UsePreviousValue=true',
			'ParameterKey=InstanceType6,UsePreviousValue=true',
			'ParameterKey=ImageID7,UsePreviousValue=true',
			'ParameterKey=SpotPrice7,UsePreviousValue=true',
			'ParameterKey=InstanceType7,UsePreviousValue=true',
			'ParameterKey=ImageID8,UsePreviousValue=true',
			'ParameterKey=SpotPrice8,UsePreviousValue=true',
			'ParameterKey=InstanceType8,UsePreviousValue=true'
		);
	my( $rv, $log ) = capture( @command );
	if( $rv != 0 ) {
		print( $log );
		print( "\n" );
		print( "Unable to set annex expiration, aborting.\n" );
		exit( 11 );
	}
}

sub waitForStackComplete {
	my( $stackName ) = @_;

	while( 1 ) {
		my @command = ( 'aws', '--region', $region, 'cloudformation', 'describe-stacks', '--stack-name', $stackName );
		my $output = captureCommand( @command );
		my $reply = decode_json( $output );

		my $stacks = $reply->{ 'Stacks' };
		foreach my $stack (@{$stacks}) {
			if( $stackName eq $stack->{ 'StackName' } ) {
				my $status = $stack->{ 'StackStatus' };
				if( $status eq "CREATE_COMPLETE" || $status eq "UPDATE_COMPLETE" ) {
					return;
				}
			}
		}

		print( "." );
		sleep( 5 );
	}
}

sub checkVPC {
	my( $vpc ) = @_;

	print( "Checking VPC for suitability:\n" );
	checkVPCForDNSResolution( $vpc );
	checkVPCForDNSHostnames( $vpc );
	print( "VPC is suitable.\n" );
}

sub checkVPCForDNSResolution {
	my( $vpc ) = @_;

	print( "\tDNS resolution... " );
	my @command = (
		'aws', '--region', $region, 'ec2', 'describe-vpc-attribute',
		'--attribute', 'enableDnsSupport', '--vpc-id', $vpc
	);

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "\n" );
		print( " failed ($rv), aborting.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	if( $reply->{ "EnableDnsSupport" }->{ "Value" } ) {
		print( "enabled\n" );
		return;
	}

	print( "DNS resolution not enabled for this VPC, aborting.\n" );
	exit( 1 );
}

sub checkVPCForDNSHostnames {
	my( $vpc ) = @_;

	print( "\tDNS hostnames... " );
	my @command = (
		'aws', '--region', $region, 'ec2', 'describe-vpc-attribute',
		'--attribute', 'enableDnsHostnames', '--vpc-id', $vpc
	);

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "\n" );
		print( " failed ($rv), aborting.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	if( $reply->{ "EnableDnsHostnames" }->{ "Value" } ) {
		print( "enabled\n" );
		return;
	}

	print( "DNS hostnames not enabled for this VPC, aborting.\n" );
	exit( 1 );
}

sub findLaunchConfigurations {
	my( $imageIDs, $instanceTypes, $spotPrices, $launchConfigList ) = @_;

	print( "Looking for launch configurations" );
	my @launchConfigs = (
		'HTCondorAnnex-1', 'HTCondorAnnex-2', 'HTCondorAnnex-3',
		'HTCondorAnnex-4', 'HTCondorAnnex-5', 'HTCondorAnnex-6',
		'HTCondorAnnex-7', 'HTCondorAnnex-8'
	);
	if( defined( $launchConfigList ) ) {
		@launchConfigs = split( ",", $launchConfigList );
		if( defined( $verbose ) ) {
			print( " " );
			print( join( ", ", @launchConfigs ) );
		}
	}
	print( "..." );

	my @command = (
		'aws', '--region', $region,
		'autoscaling', 'describe-launch-configurations',
		'--launch-configuration-names',
		@launchConfigs
	);

	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "\n" );
		print( " failed ($rv), aborting.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	my $lcList = $reply->{ 'LaunchConfigurations' };

	if( scalar( @{$lcList} ) == 0 ) {
		print( " done.  Found no launch configurations, aborting.\n" );
		exit( 1 );
	}

	print( " done." );
	if( $verbose ) { print( "  Found (AMI, instance type) [spot price] tuples: " ); }
	for( my $i = 0; $i < scalar( @{$lcList} ); ++$i ) {
		my $lc = $lcList->[ $i ];
		push( @{$imageIDs}, $lc->{ 'ImageId' } );
		push( @{$spotPrices}, $lc->{ 'SpotPrice' } );
		push( @{$instanceTypes}, $lc->{ 'InstanceType' } );
		if( $verbose ) {
			print( " (" . $lc->{ 'ImageId' } . ", " . $lc->{ 'InstanceType' } . ")" );
			if( defined( $lc->{ 'SpotPrice' } ) ) { print( " [" . $lc->{ 'SpotPrice' } . "]" ); }
			if( $i + 1 < scalar( @{$lcList} ) ) { print( "," ); }
		}
	}
	if( $verbose ) { print( "." ); }
	print( "\n" );
}

sub setAnnexSize {
	my( $asgNames, $annexSize ) = @_;

	my $asgCount = scalar( @{$asgNames} );
	my $remainder = $annexSize % $asgCount;
	my $asgSize = ($annexSize - $remainder) / $asgCount;

	my @sizes = ();
	for( my $i = 0; $i < $asgCount; ++$i ) {
		$sizes[ $i ] = $asgSize;
		if( $i < $remainder ) { ++$sizes[ $i ]; }
	}

	for( my $i = 0; $i < $asgCount; ++$i ) {
		my $asgName = $asgNames->[ $i ];
		print( " " . ($i + 1) );
		setAutoScalingGroupDesiredSize( $asgName, $sizes[ $i ] );
	}
}

sub waitForAnnexSize {
	my( $asgNames, $annexSize ) = @_;

	my @describeASGCommand = ( 'aws', '--region', $region,
		'autoscaling', 'describe-auto-scaling-groups',
		'--auto-scaling-group-names', @{$asgNames} );

	my $lastInstanceCount = -1;
	my $desiredAnnexSize = undef;
	while( 1 ) {
		my $output = captureCommand( @describeASGCommand );
		my $reply = decode_json( $output );

		$desiredAnnexSize = 0;
		my $instanceCount = 0;
		my $autoScalingGroups = $reply->{ 'AutoScalingGroups' };
		foreach my $autoScalingGroup (@{$autoScalingGroups}) {
			$desiredAnnexSize += $autoScalingGroup->{ 'DesiredCapacity' };
			my $instances = $autoScalingGroup->{ 'Instances' };
			$instanceCount += scalar( @{$instances} );
			# print( " " . scalar( @{$instances} ) . "/" . $autoScalingGroup->{ 'DesiredCapacity' } );
		}

		if( $instanceCount == $desiredAnnexSize ) {
			last;
		}

		if( $instanceCount != $lastInstanceCount ) {
			$lastInstanceCount = $instanceCount;
			print( " currently ${instanceCount}" );
		}

		print( "." );
		sleep( 5 );
	}

	return $desiredAnnexSize;
}

sub keypairExists {
	my( $keypairName ) = @_;

	my @command = ( 'aws', '--region', $region, 'ec2', 'describe-key-pairs' );
	my( $rv, $output ) = capture( @command );
	if( $rv != 0 ) {
		print( $output );
		print( "Unable to determine if keypair '$keypairName' exists, aborting.\n" );
		exit( 1 );
	}

	my $reply = decode_json( $output );
	my $keypairs = $reply->{ "KeyPairs" };

	foreach my $kp (@{$keypairs}) {
		if( $kp->{ 'KeyName' } eq $keypairName ) { return TRUE; }
	}
	return FALSE;
}

sub timespec {
	my( $time, $truncate, $addMinutes ) = @_;
	if(! defined( $time )) {
		$time = time();
	}

	my( $sec, $minute, $hour, $day, $month, $year, $x, $y, $z ) = gmtime( $time );
	$year += 1900;
	$month += 1;

	if( defined( $truncate ) && $truncate == 1 ) {
		$sec = 0;
	}

	if( defined( $addMinutes ) ) {
		$minute += $addMinutes;
	}

	if( $month < 10 ) { $month = "0${month}"; }
	if( $day < 10 ) { $day = "0${day}"; }
	if( $hour < 10 ) { $hour = "0${hour}"; }
	if( $minute < 10 ) { $minute = "0${minute}"; }
	if( $sec < 10 ) { $sec = "0${sec}"; }

	return "${year}-${month}-${day} ${hour}:${minute}:${sec}";
}
